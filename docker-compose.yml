services:
  # reference: https://sanidhya235.medium.com/introduction-to-minio-193e8523a4a8
  # reference: https://mlflow.org/docs/latest/tracking/tutorials/remote-server.html
  # reference: https://blog.min.io/setting-up-a-development-machine-with-mlflow-and-minio/
  s3:
    image: quay.io/minio/minio
    container_name: mlflow_minio
    volumes:
      - ./minio_data:/data # mount container 'data' directory to 'data' directory of local machine in case of outage.
    ports:
      - "${MINIO_PORT}:9000"
      - "{MINIO_CONSOLE_PORT}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ADDRESS=${MINIO_ADDRESS}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS}
      - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  tracking_server:
    restart: always
    build: ./mlflow # build container based on Dockerfile in mlflow directory
    image: mlflow_server
    container_name: mlflow_server
    ports:
      - "${MLFLOW_PORT}:5000"
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:${MINIO_PORT}
      - MLFLOW_S3_IGNORE_TLS=true
    command: >
      mlflow server
      --backend-store-uri postgresql://${PG_USER}:${PG_PASSWORD}@db:${PG_PORT}/${PG_DATABASE}
      --host 0.0.0.0
      --serve-artifacts
      --artifacts-destination s3://${MLFLOW_BUCKET_NAME}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MLFLOW_PORT}/"]
      interval: 30s
      timeout: 10s
      retries: 3

  volumes: # create volume for minio service
    minio_data:
